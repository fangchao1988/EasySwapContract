{
  "version": "3.4",
  "log": [
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "08e138b442cb26161e22a62c664b16118323c8ebb14745c6df0f2bbb68c7f776",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "94cc7a9fbb8377b816e34b431fc2e3f418e5428b3a44a1eca4d0ee15f06a561e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ff891902670b20c6503803a659049f2fa056a691ba4c3d8c374ed8ebf902e157",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "76620204b4a92ad3730c940b65fd75d31ddb19392b6c8c71f455e52818db387a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapOrderBook.sol:EasySwapOrderBook": {
        "src": "contracts/EasySwapOrderBook.sol:22",
        "version": {
          "withMetadata": "a25ef1d9cc738534dc77142ff9075bbf1fdc851dd4851a7db2dcca98c2dc4eff",
          "withoutMetadata": "2b7a9bd835ec56adf67727425231841cdfdc2a1492db70db8d3e7227d7f34fbd",
          "linkedWithoutMetadata": "2b7a9bd835ec56adf67727425231841cdfdc2a1492db70db8d3e7227d7f34fbd"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "contracts/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "contracts/OrderStorage.sol:OrderStorage",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable",
          "contracts/libraries/LibOrder.sol:LibOrder",
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "initialize(uint128,address,string,string)",
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])",
          "matchOrderWithoutPayback((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),uint256)",
          "setVault(address)",
          "withdrawETH(address,uint256)",
          "pause()",
          "unpause()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)8197,t_struct(DBOrder)8241_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:14"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)8200,t_struct(Tree)8600_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:17"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)8200,t_mapping(t_userDefinedValueType(Price)8578,t_struct(OrderQueue)8249_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:21"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:328"
            },
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "53",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)8197,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "54",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            },
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "104",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            },
            {
              "label": "_vault",
              "offset": 0,
              "slot": "155",
              "type": "t_address",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:69"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "156",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:646"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)8203": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)8200": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)8200,t_mapping(t_userDefinedValueType(Price)8578,t_struct(OrderQueue)8249_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)8200,t_struct(Tree)8600_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)8200,t_mapping(t_userDefinedValueType(Price)8578,t_struct(OrderQueue)8249_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)8200,t_struct(Tree)8600_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)8197,t_struct(DBOrder)8241_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)8197,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)8578,t_struct(Node)8590_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)8578,t_struct(OrderQueue)8249_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)8210_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)8241_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)8234_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)8197",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)8590_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)8234_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)8200",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)8203",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)8210_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)8249_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)8197",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)8197",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)8600_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)8578,t_struct(Node)8590_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)8197": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)8578": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderStorage.sol:OrderStorage": {
        "src": "contracts/OrderStorage.sol:10",
        "version": {
          "withMetadata": "aae97cd9ff01325c5dc6eacfa7210334cd0f9c1d7c76b46db6e33ba49e94ca88",
          "withoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c",
          "linkedWithoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary",
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getBestPrice(address,uint8)",
          "getNextBestPrice(address,uint8,uint128)",
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)8197,t_struct(DBOrder)8241_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:14"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)8200,t_struct(Tree)8600_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:17"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)8200,t_mapping(t_userDefinedValueType(Price)8578,t_struct(OrderQueue)8249_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:21"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:328"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)8203": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)8200": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)8200,t_mapping(t_userDefinedValueType(Price)8578,t_struct(OrderQueue)8249_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)8200,t_struct(Tree)8600_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)8200,t_mapping(t_userDefinedValueType(Price)8578,t_struct(OrderQueue)8249_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)8200,t_struct(Tree)8600_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)8197,t_struct(DBOrder)8241_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)8578,t_struct(Node)8590_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)8578,t_struct(OrderQueue)8249_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)8210_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)8241_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)8234_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)8197",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)8590_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)8234_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)8200",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)8203",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)8210_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)8249_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)8197",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)8197",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)8600_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)8578",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)8578,t_struct(Node)8590_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)8197": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)8578": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint128": {
              "label": "uint128"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderValidator.sol:OrderValidator": {
        "src": "contracts/OrderValidator.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)8197,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)8197,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)8197": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ProtocolManager.sol:ProtocolManager": {
        "src": "contracts/ProtocolManager.sol:10",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "setProtocolShare(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook": {
        "src": "contracts/interface/IEasySwapOrderBook.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapVault.sol:IEasySwapVault": {
        "src": "contracts/interface/IEasySwapVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editNFT(bytes32,bytes32)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "transferERC721(address,address,(uint256,address,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibOrder.sol:LibOrder": {
        "src": "contracts/libraries/LibOrder.sol:8",
        "version": {
          "withMetadata": "d7bf40b83ff72d0d566adcae0b751efaed10bf2fd84d167ba5eb2a7144f37958",
          "withoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34",
          "linkedWithoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibPayInfo.sol:LibPayInfo": {
        "src": "contracts/libraries/LibPayInfo.sol:4",
        "version": {
          "withMetadata": "65523e9db1db0fa207c81f6ff34392b54d02b3bbb7724a7d84051d02b4409339",
          "withoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f",
          "linkedWithoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable": {
        "src": "contracts/libraries/LibTransferSafeUpgradeable.sol:11",
        "version": {
          "withMetadata": "58d63d3486f99002e4f7a645b94e5f1536228fa49573d9d11c89cac733ed981d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary": {
        "src": "contracts/libraries/RedBlackTreeLibrary.sol:18",
        "version": {
          "withMetadata": "53ccc608eb0b7dcb1871859a027bace5e31a287053208402809dadd544b3ffa0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerTest.sol:ProtocolManagerTest": {
        "src": "contracts/test/ProtocolManagerTest.sol:6",
        "version": {
          "withMetadata": "80d6603065c3094c487a59aba63817aa1a52a06dd34034738fa7b07e7bda902f",
          "withoutMetadata": "1e5ab634476f7a9797fe182a4c677e476c29129954215bbe10c3ab2c09577866",
          "linkedWithoutMetadata": "1e5ab634476f7a9797fe182a4c677e476c29129954215bbe10c3ab2c09577866"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/test/ProtocolManagerTest.sol:8",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ProtocolManager"
            ]
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/test/ProtocolManagerTest.sol:7",
            "parentContracts": [
              "OwnableUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerV2Test.sol:ProtocolManagerV2Test": {
        "src": "contracts/test/ProtocolManagerV2Test.sol:6",
        "version": {
          "withMetadata": "e828fcc94fbaaa3b2078e191209e452db27bd655f31440f04bdeed1664799cbf",
          "withoutMetadata": "1e5ab634476f7a9797fe182a4c677e476c29129954215bbe10c3ab2c09577866",
          "linkedWithoutMetadata": "1e5ab634476f7a9797fe182a4c677e476c29129954215bbe10c3ab2c09577866"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/test/ProtocolManagerV2Test.sol:8",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ProtocolManager"
            ]
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/test/ProtocolManagerV2Test.sol:7",
            "parentContracts": [
              "OwnableUpgradeable"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "08e138b442cb26161e22a62c664b16118323c8ebb14745c6df0f2bbb68c7f776",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "b9a8105ce8d9eafa8cab0f5662c08dd2e1da66de1d186e63138b776fc19224e8",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "94cc7a9fbb8377b816e34b431fc2e3f418e5428b3a44a1eca4d0ee15f06a561e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ff891902670b20c6503803a659049f2fa056a691ba4c3d8c374ed8ebf902e157",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "76620204b4a92ad3730c940b65fd75d31ddb19392b6c8c71f455e52818db387a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapOrderBook.sol:EasySwapOrderBook": {
        "src": "contracts/EasySwapOrderBook.sol:22",
        "version": {
          "withMetadata": "43ba8a7ec3411fcb3b2987f208820a9b90c1b2db501c09338e78447c3b2a5ad9",
          "withoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43",
          "linkedWithoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "contracts/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "contracts/OrderStorage.sol:OrderStorage",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable",
          "contracts/libraries/LibOrder.sol:LibOrder",
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "initialize(uint128,address,string,string)",
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])",
          "matchOrderWithoutPayback((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),uint256)",
          "setVault(address)",
          "withdrawETH(address,uint256)",
          "pause()",
          "unpause()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:97",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:98",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init_unchained",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:106",
            "parentContracts": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_struct(DBOrder)10674_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            },
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "53",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "54",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            },
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "104",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            },
            {
              "label": "_vault",
              "offset": 0,
              "slot": "155",
              "type": "t_address",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:69"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "156",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:636"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10636": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10633": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_struct(DBOrder)10674_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11011,t_struct(Node)11023_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10643_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10674_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10667_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11023_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10667_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10633",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10636",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10643_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10682_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11033_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11011,t_struct(Node)11023_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10630": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11011": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapVault.sol:EasySwapVault": {
        "src": "contracts/EasySwapVault.sol:11",
        "version": {
          "withMetadata": "41091549269e21fba1201a80451fed539faf51bb8e8e6b85476fd375a9f40ad9",
          "withoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac",
          "linkedWithoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapVault.sol:IEasySwapVault"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable"
        ],
        "methods": [
          "initialize()",
          "setOrderBook(address)",
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "editNFT(bytes32,bytes32)",
          "transferERC721(address,address,(uint256,address,uint96))",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "orderBook",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:15"
            },
            {
              "label": "ETHBalance",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:16"
            },
            {
              "label": "NFTBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:17"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:142"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10630": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderStorage.sol:OrderStorage": {
        "src": "contracts/OrderStorage.sol:11",
        "version": {
          "withMetadata": "536d6a84b1bb2551abf9caf0daab89e63983203ac0b4f37d737bd8973e375f11",
          "withoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c",
          "linkedWithoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary",
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getBestPrice(address,uint8)",
          "getNextBestPrice(address,uint8,uint128)",
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer",
            "src": "contracts/OrderStorage.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_struct(DBOrder)10674_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10636": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10633": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_struct(DBOrder)10674_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11011,t_struct(Node)11023_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10643_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10674_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10667_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11023_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10667_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10633",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10636",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10643_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10682_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11033_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11011,t_struct(Node)11023_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10630": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11011": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint128": {
              "label": "uint128"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderValidator.sol:OrderValidator": {
        "src": "contracts/OrderValidator.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10630": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ProtocolManager.sol:ProtocolManager": {
        "src": "contracts/ProtocolManager.sol:10",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "setProtocolShare(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook": {
        "src": "contracts/interface/IEasySwapOrderBook.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapVault.sol:IEasySwapVault": {
        "src": "contracts/interface/IEasySwapVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editNFT(bytes32,bytes32)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "transferERC721(address,address,(uint256,address,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibOrder.sol:LibOrder": {
        "src": "contracts/libraries/LibOrder.sol:8",
        "version": {
          "withMetadata": "d7bf40b83ff72d0d566adcae0b751efaed10bf2fd84d167ba5eb2a7144f37958",
          "withoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34",
          "linkedWithoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibPayInfo.sol:LibPayInfo": {
        "src": "contracts/libraries/LibPayInfo.sol:4",
        "version": {
          "withMetadata": "65523e9db1db0fa207c81f6ff34392b54d02b3bbb7724a7d84051d02b4409339",
          "withoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f",
          "linkedWithoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable": {
        "src": "contracts/libraries/LibTransferSafeUpgradeable.sol:11",
        "version": {
          "withMetadata": "58d63d3486f99002e4f7a645b94e5f1536228fa49573d9d11c89cac733ed981d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary": {
        "src": "contracts/libraries/RedBlackTreeLibrary.sol:18",
        "version": {
          "withMetadata": "53ccc608eb0b7dcb1871859a027bace5e31a287053208402809dadd544b3ffa0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerTest.sol:ProtocolManagerTest": {
        "src": "contracts/test/ProtocolManagerTest.sol:6",
        "version": {
          "withMetadata": "a1f0ff4a703d8e3bfbe8333ec4c82692153faf679e221548871982f779f3cbdc",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerV2Test.sol:ProtocolManagerV2Test": {
        "src": "contracts/test/ProtocolManagerV2Test.sol:6",
        "version": {
          "withMetadata": "9d0875312cd2db3a70093c9b8133593c7fba007fce97066124182beb2745bbc3",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721.sol:TestERC721": {
        "src": "contracts/test/TestERC721.sol:7",
        "version": {
          "withMetadata": "c53dea8faa92899752c9c01573eab8d73495a234e1ce5706c69cad5dd09715ac",
          "withoutMetadata": "212c2ab4c7f4af3a06d25264220d75a17f42315ecd250cf23eb59652b9e80d60",
          "linkedWithoutMetadata": "212c2ab4c7f4af3a06d25264220d75a17f42315ecd250cf23eb59652b9e80d60"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "setTokenURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721",
            "src": "contracts/test/TestERC721.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_tokenURI",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "TestERC721",
              "src": "contracts/test/TestERC721.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721A.sol:Troll": {
        "src": "contracts/test/TestERC721A.sol:9",
        "version": {
          "withMetadata": "11cb263cf0441feb27b546fe1a786de19f4bc43f2138133d28027d72e3b1a8c1",
          "withoutMetadata": "8ee3adec7a060a9695be3dcac880fccce514c21a440fa95f1ea5bc09875f2a84",
          "linkedWithoutMetadata": "8ee3adec7a060a9695be3dcac880fccce514c21a440fa95f1ea5bc09875f2a84"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "erc721a/contracts/ERC721A.sol:ERC721A",
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)",
          "setMintStatus(bool)",
          "setTokenURI(string)",
          "withdrawETH()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Troll",
            "src": "contracts/test/TestERC721A.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13271_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "metaURI",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:10"
            },
            {
              "label": "mintStatus",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13271_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13271_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A": {
        "src": "erc721a/contracts/ERC721A.sol:36",
        "version": {
          "withMetadata": "700f6519a4ec7e96755d83f5854523337ab07810dcdb24c8c79f7133cfba1e22",
          "withoutMetadata": "1d2a1c2c152f7b0a0ff27a673eaa5be6f5ad9c0f97bfe83499c5d497d28f3179",
          "linkedWithoutMetadata": "1d2a1c2c152f7b0a0ff27a673eaa5be6f5ad9c0f97bfe83499c5d497d28f3179"
        },
        "inherit": [
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "totalSupply()",
          "balanceOf(address)",
          "supportsInterface(bytes4)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721A",
            "src": "erc721a/contracts/ERC721A.sol:140"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13271_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13271_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13271_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A__IERC721Receiver": {
        "src": "erc721a/contracts/ERC721A.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/IERC721A.sol:IERC721A": {
        "src": "erc721a/contracts/IERC721A.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "08e138b442cb26161e22a62c664b16118323c8ebb14745c6df0f2bbb68c7f776",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "b9a8105ce8d9eafa8cab0f5662c08dd2e1da66de1d186e63138b776fc19224e8",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "94cc7a9fbb8377b816e34b431fc2e3f418e5428b3a44a1eca4d0ee15f06a561e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ff891902670b20c6503803a659049f2fa056a691ba4c3d8c374ed8ebf902e157",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "76620204b4a92ad3730c940b65fd75d31ddb19392b6c8c71f455e52818db387a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapOrderBook.sol:EasySwapOrderBook": {
        "src": "contracts/EasySwapOrderBook.sol:22",
        "version": {
          "withMetadata": "43ba8a7ec3411fcb3b2987f208820a9b90c1b2db501c09338e78447c3b2a5ad9",
          "withoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43",
          "linkedWithoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "contracts/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "contracts/OrderStorage.sol:OrderStorage",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable",
          "contracts/libraries/LibOrder.sol:LibOrder",
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "initialize(uint128,address,string,string)",
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])",
          "matchOrderWithoutPayback((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),uint256)",
          "setVault(address)",
          "withdrawETH(address,uint256)",
          "pause()",
          "unpause()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:97",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:98",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init_unchained",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:106",
            "parentContracts": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_struct(DBOrder)10674_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            },
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "53",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "54",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            },
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "104",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            },
            {
              "label": "_vault",
              "offset": 0,
              "slot": "155",
              "type": "t_address",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:69"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "156",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:636"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10636": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10633": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_struct(DBOrder)10674_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11011,t_struct(Node)11023_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10643_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10674_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10667_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11023_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10667_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10633",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10636",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10643_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10682_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11033_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11011,t_struct(Node)11023_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10630": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11011": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapVault.sol:EasySwapVault": {
        "src": "contracts/EasySwapVault.sol:11",
        "version": {
          "withMetadata": "41091549269e21fba1201a80451fed539faf51bb8e8e6b85476fd375a9f40ad9",
          "withoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac",
          "linkedWithoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapVault.sol:IEasySwapVault"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable"
        ],
        "methods": [
          "initialize()",
          "setOrderBook(address)",
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "editNFT(bytes32,bytes32)",
          "transferERC721(address,address,(uint256,address,uint96))",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "orderBook",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:15"
            },
            {
              "label": "ETHBalance",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:16"
            },
            {
              "label": "NFTBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:17"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:142"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10630": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderStorage.sol:OrderStorage": {
        "src": "contracts/OrderStorage.sol:11",
        "version": {
          "withMetadata": "536d6a84b1bb2551abf9caf0daab89e63983203ac0b4f37d737bd8973e375f11",
          "withoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c",
          "linkedWithoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary",
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getBestPrice(address,uint8)",
          "getNextBestPrice(address,uint8,uint128)",
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer",
            "src": "contracts/OrderStorage.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_struct(DBOrder)10674_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10636": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10633": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10633,t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10633,t_struct(Tree)11033_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_struct(DBOrder)10674_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11011,t_struct(Node)11023_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11011,t_struct(OrderQueue)10682_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10643_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10674_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10667_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11023_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10667_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10633",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10636",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10643_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10682_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10630",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11033_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11011",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11011,t_struct(Node)11023_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10630": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11011": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint128": {
              "label": "uint128"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderValidator.sol:OrderValidator": {
        "src": "contracts/OrderValidator.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10630,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10630": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ProtocolManager.sol:ProtocolManager": {
        "src": "contracts/ProtocolManager.sol:10",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "setProtocolShare(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook": {
        "src": "contracts/interface/IEasySwapOrderBook.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapVault.sol:IEasySwapVault": {
        "src": "contracts/interface/IEasySwapVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editNFT(bytes32,bytes32)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "transferERC721(address,address,(uint256,address,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibOrder.sol:LibOrder": {
        "src": "contracts/libraries/LibOrder.sol:8",
        "version": {
          "withMetadata": "d7bf40b83ff72d0d566adcae0b751efaed10bf2fd84d167ba5eb2a7144f37958",
          "withoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34",
          "linkedWithoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibPayInfo.sol:LibPayInfo": {
        "src": "contracts/libraries/LibPayInfo.sol:4",
        "version": {
          "withMetadata": "65523e9db1db0fa207c81f6ff34392b54d02b3bbb7724a7d84051d02b4409339",
          "withoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f",
          "linkedWithoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable": {
        "src": "contracts/libraries/LibTransferSafeUpgradeable.sol:11",
        "version": {
          "withMetadata": "58d63d3486f99002e4f7a645b94e5f1536228fa49573d9d11c89cac733ed981d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary": {
        "src": "contracts/libraries/RedBlackTreeLibrary.sol:18",
        "version": {
          "withMetadata": "53ccc608eb0b7dcb1871859a027bace5e31a287053208402809dadd544b3ffa0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerTest.sol:ProtocolManagerTest": {
        "src": "contracts/test/ProtocolManagerTest.sol:6",
        "version": {
          "withMetadata": "a1f0ff4a703d8e3bfbe8333ec4c82692153faf679e221548871982f779f3cbdc",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerV2Test.sol:ProtocolManagerV2Test": {
        "src": "contracts/test/ProtocolManagerV2Test.sol:6",
        "version": {
          "withMetadata": "9d0875312cd2db3a70093c9b8133593c7fba007fce97066124182beb2745bbc3",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721.sol:TestERC721": {
        "src": "contracts/test/TestERC721.sol:7",
        "version": {
          "withMetadata": "c53dea8faa92899752c9c01573eab8d73495a234e1ce5706c69cad5dd09715ac",
          "withoutMetadata": "212c2ab4c7f4af3a06d25264220d75a17f42315ecd250cf23eb59652b9e80d60",
          "linkedWithoutMetadata": "212c2ab4c7f4af3a06d25264220d75a17f42315ecd250cf23eb59652b9e80d60"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "setTokenURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721",
            "src": "contracts/test/TestERC721.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_tokenURI",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "TestERC721",
              "src": "contracts/test/TestERC721.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721A.sol:Troll": {
        "src": "contracts/test/TestERC721A.sol:9",
        "version": {
          "withMetadata": "11cb263cf0441feb27b546fe1a786de19f4bc43f2138133d28027d72e3b1a8c1",
          "withoutMetadata": "8ee3adec7a060a9695be3dcac880fccce514c21a440fa95f1ea5bc09875f2a84",
          "linkedWithoutMetadata": "8ee3adec7a060a9695be3dcac880fccce514c21a440fa95f1ea5bc09875f2a84"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "erc721a/contracts/ERC721A.sol:ERC721A",
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)",
          "setMintStatus(bool)",
          "setTokenURI(string)",
          "withdrawETH()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Troll",
            "src": "contracts/test/TestERC721A.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13271_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "metaURI",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:10"
            },
            {
              "label": "mintStatus",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13271_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13271_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A": {
        "src": "erc721a/contracts/ERC721A.sol:36",
        "version": {
          "withMetadata": "700f6519a4ec7e96755d83f5854523337ab07810dcdb24c8c79f7133cfba1e22",
          "withoutMetadata": "1d2a1c2c152f7b0a0ff27a673eaa5be6f5ad9c0f97bfe83499c5d497d28f3179",
          "linkedWithoutMetadata": "1d2a1c2c152f7b0a0ff27a673eaa5be6f5ad9c0f97bfe83499c5d497d28f3179"
        },
        "inherit": [
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "totalSupply()",
          "balanceOf(address)",
          "supportsInterface(bytes4)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721A",
            "src": "erc721a/contracts/ERC721A.sol:140"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13271_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13271_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13271_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A__IERC721Receiver": {
        "src": "erc721a/contracts/ERC721A.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/IERC721A.sol:IERC721A": {
        "src": "erc721a/contracts/IERC721A.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:30",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:33"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:26",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings",
          "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:ERC721Utils": {
        "src": "@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol:16",
        "version": {
          "withMetadata": "43f21de6f076034798b944a8fbaefb46fe2fa39e602d97ac6f04a31c253283bd",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Panic.sol:Panic": {
        "src": "@openzeppelin/contracts/utils/Panic.sol:26",
        "version": {
          "withMetadata": "f5969df3b4628f00d10bde5ef93621ec0dba6b27468c9c1803ffe831112a4775",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:25",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:13",
        "version": {
          "withMetadata": "c78a00db84b5ef40ae60e8d24f93a4a45d4e07d0efd1d3d2c0153b5367777bd0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "de363ff8a4a499705c8155cac9e7d97ae4aa1d39e41840cd2f55751832b8bef5",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "899ed66da7163425d90d2b3ecc12c5cf54d3b84b6f06a0e1e864dcfb84a13b2e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:12",
        "version": {
          "withMetadata": "010f72a55aa514589016e76531394f1b8994e0d03241013658b4288b372d22c0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast",
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/Panic.sol:Panic"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast": {
        "src": "@openzeppelin/contracts/utils/math/SafeCast.sol:19",
        "version": {
          "withMetadata": "e0f0ac74d996bee803916339ca6f9a62c0e9fe152c85f090cae5d37f8c97c25a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:11",
        "version": {
          "withMetadata": "3a5fdfcb27e014e0ba0015bb13d26c34724a487e65b179991ea08794f78f4b9b",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/SafeCast.sol:SafeCast"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapOrderBook.sol:EasySwapOrderBook": {
        "src": "contracts/EasySwapOrderBook.sol:22",
        "version": {
          "withMetadata": "8f2d34dda1e72e55ce070c1a66c1487a0e06f16fe705969335aacab2d5935b06",
          "withoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43",
          "linkedWithoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "contracts/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "contracts/OrderStorage.sol:OrderStorage",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable",
          "contracts/libraries/LibOrder.sol:LibOrder",
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "initialize(uint128,address,string,string)",
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])",
          "matchOrderWithoutPayback((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),uint256)",
          "setVault(address)",
          "withdrawETH(address,uint256)",
          "pause()",
          "unpause()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:97",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:98",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init_unchained",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:106",
            "parentContracts": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)13974,t_struct(DBOrder)14018_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)13977,t_struct(Tree)14377_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)13977,t_mapping(t_userDefinedValueType(Price)14355,t_struct(OrderQueue)14026_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            },
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "53",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)13974,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "54",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            },
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "104",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            },
            {
              "label": "_vault",
              "offset": 0,
              "slot": "155",
              "type": "t_address",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:69"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "156",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:636"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)13980": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)13977": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)13977,t_mapping(t_userDefinedValueType(Price)14355,t_struct(OrderQueue)14026_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)13977,t_struct(Tree)14377_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)13977,t_mapping(t_userDefinedValueType(Price)14355,t_struct(OrderQueue)14026_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)13977,t_struct(Tree)14377_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)13974,t_struct(DBOrder)14018_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)13974,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)14355,t_struct(Node)14367_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)14355,t_struct(OrderQueue)14026_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)13987_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)14018_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)14011_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)13974",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)14367_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)14011_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)13977",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)13980",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)13987_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)14026_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)13974",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)13974",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)14377_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)14355,t_struct(Node)14367_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)13974": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)14355": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapVault.sol:EasySwapVault": {
        "src": "contracts/EasySwapVault.sol:11",
        "version": {
          "withMetadata": "5d1356b6853b444818ac330cc1c3a4ab5db0bf8256dfed31220e93306f69d85a",
          "withoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac",
          "linkedWithoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapVault.sol:IEasySwapVault"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable"
        ],
        "methods": [
          "initialize()",
          "setOrderBook(address)",
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "editNFT(bytes32,bytes32)",
          "transferERC721(address,address,(uint256,address,uint96))",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "orderBook",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:15"
            },
            {
              "label": "ETHBalance",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)13974,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:16"
            },
            {
              "label": "NFTBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)13974,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:17"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:142"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)13974,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)13974": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderStorage.sol:OrderStorage": {
        "src": "contracts/OrderStorage.sol:11",
        "version": {
          "withMetadata": "d04293180a74cb3049fd4b03c2a0a6e4b52e6dc87bf79d46636f0c63bda6733d",
          "withoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c",
          "linkedWithoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary",
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getBestPrice(address,uint8)",
          "getNextBestPrice(address,uint8,uint128)",
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer",
            "src": "contracts/OrderStorage.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)13974,t_struct(DBOrder)14018_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)13977,t_struct(Tree)14377_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)13977,t_mapping(t_userDefinedValueType(Price)14355,t_struct(OrderQueue)14026_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)13980": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)13977": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)13977,t_mapping(t_userDefinedValueType(Price)14355,t_struct(OrderQueue)14026_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)13977,t_struct(Tree)14377_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)13977,t_mapping(t_userDefinedValueType(Price)14355,t_struct(OrderQueue)14026_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)13977,t_struct(Tree)14377_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)13974,t_struct(DBOrder)14018_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)14355,t_struct(Node)14367_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)14355,t_struct(OrderQueue)14026_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)13987_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)14018_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)14011_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)13974",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)14367_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)14011_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)13977",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)13980",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)13987_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)14026_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)13974",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)13974",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)14377_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)14355",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)14355,t_struct(Node)14367_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)13974": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)14355": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint128": {
              "label": "uint128"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:43"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderValidator.sol:OrderValidator": {
        "src": "contracts/OrderValidator.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)13974,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)13974,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)13974": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ProtocolManager.sol:ProtocolManager": {
        "src": "contracts/ProtocolManager.sol:10",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "setProtocolShare(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook": {
        "src": "contracts/interface/IEasySwapOrderBook.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapVault.sol:IEasySwapVault": {
        "src": "contracts/interface/IEasySwapVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editNFT(bytes32,bytes32)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "transferERC721(address,address,(uint256,address,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibOrder.sol:LibOrder": {
        "src": "contracts/libraries/LibOrder.sol:8",
        "version": {
          "withMetadata": "d7bf40b83ff72d0d566adcae0b751efaed10bf2fd84d167ba5eb2a7144f37958",
          "withoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34",
          "linkedWithoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibPayInfo.sol:LibPayInfo": {
        "src": "contracts/libraries/LibPayInfo.sol:4",
        "version": {
          "withMetadata": "65523e9db1db0fa207c81f6ff34392b54d02b3bbb7724a7d84051d02b4409339",
          "withoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f",
          "linkedWithoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable": {
        "src": "contracts/libraries/LibTransferSafeUpgradeable.sol:11",
        "version": {
          "withMetadata": "4101e31841abd4d23e4b13bae579a7da76481ef0c7198c1e761b5a3c5590d5ee",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary": {
        "src": "contracts/libraries/RedBlackTreeLibrary.sol:18",
        "version": {
          "withMetadata": "53ccc608eb0b7dcb1871859a027bace5e31a287053208402809dadd544b3ffa0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerTest.sol:ProtocolManagerTest": {
        "src": "contracts/test/ProtocolManagerTest.sol:6",
        "version": {
          "withMetadata": "84ca9b41107064a09d8b4d0720c60b78753e9b3eb4b789c699fd3deeac191caf",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerV2Test.sol:ProtocolManagerV2Test": {
        "src": "contracts/test/ProtocolManagerV2Test.sol:6",
        "version": {
          "withMetadata": "b2dc6307a0d90b43bbc3af5ef8315e618b626e1e177fec8d012ff18074802882",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721.sol:TestERC721": {
        "src": "contracts/test/TestERC721.sol:7",
        "version": {
          "withMetadata": "a7caeb41ee69a7ea196eae7c61f942c39b0964eca967769492cdf368224ba363",
          "withoutMetadata": "3a82cd71c7ca92edad5c4e4782a0b03ca1939a67ca6e57c4cbd3b58f40073eba",
          "linkedWithoutMetadata": "3a82cd71c7ca92edad5c4e4782a0b03ca1939a67ca6e57c4cbd3b58f40073eba"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "setTokenURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721",
            "src": "contracts/test/TestERC721.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_tokenURI",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "TestERC721",
              "src": "contracts/test/TestERC721.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721A.sol:Troll": {
        "src": "contracts/test/TestERC721A.sol:9",
        "version": {
          "withMetadata": "51043dec6675d4773b78f02163ec7160595245eeb1dcdf082c08f223268808d6",
          "withoutMetadata": "06b2137ac6afd8ce6e78bb442a69a47f1de1280656e684071ea4e2513f928aef",
          "linkedWithoutMetadata": "06b2137ac6afd8ce6e78bb442a69a47f1de1280656e684071ea4e2513f928aef"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "erc721a/contracts/ERC721A.sol:ERC721A",
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)",
          "setMintStatus(bool)",
          "setTokenURI(string)",
          "withdrawETH()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Troll",
            "src": "contracts/test/TestERC721A.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:110"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:122"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)16615_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:137"
            },
            {
              "label": "_spotMinted",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:141"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "9",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "10",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:40"
            },
            {
              "label": "metaURI",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:10"
            },
            {
              "label": "mintStatus",
              "offset": 0,
              "slot": "12",
              "type": "t_bool",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)16615_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)16615_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A": {
        "src": "erc721a/contracts/ERC721A.sol:39",
        "version": {
          "withMetadata": "5e9f796a0e4a94a7544282af7ca4b56b59c8b13ce4c0c3087ab89d2bf3ef4294",
          "withoutMetadata": "52053bf20b819b166fa8f2b5d70ccb653123fb74edc0713a4f1b2e927034842e",
          "linkedWithoutMetadata": "52053bf20b819b166fa8f2b5d70ccb653123fb74edc0713a4f1b2e927034842e"
        },
        "inherit": [
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "totalSupply()",
          "balanceOf(address)",
          "supportsInterface(bytes4)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721A",
            "src": "erc721a/contracts/ERC721A.sol:147"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:110"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:122"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)16615_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:137"
            },
            {
              "label": "_spotMinted",
              "offset": 0,
              "slot": "8",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:141"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)16615_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)16615_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A__IERC721Receiver": {
        "src": "erc721a/contracts/ERC721A.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/IERC721A.sol:IERC721A": {
        "src": "erc721a/contracts/IERC721A.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "08e138b442cb26161e22a62c664b16118323c8ebb14745c6df0f2bbb68c7f776",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "b9a8105ce8d9eafa8cab0f5662c08dd2e1da66de1d186e63138b776fc19224e8",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "94cc7a9fbb8377b816e34b431fc2e3f418e5428b3a44a1eca4d0ee15f06a561e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ff891902670b20c6503803a659049f2fa056a691ba4c3d8c374ed8ebf902e157",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "76620204b4a92ad3730c940b65fd75d31ddb19392b6c8c71f455e52818db387a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapOrderBook.sol:EasySwapOrderBook": {
        "src": "contracts/EasySwapOrderBook.sol:22",
        "version": {
          "withMetadata": "43ba8a7ec3411fcb3b2987f208820a9b90c1b2db501c09338e78447c3b2a5ad9",
          "withoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43",
          "linkedWithoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "contracts/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "contracts/OrderStorage.sol:OrderStorage",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable",
          "contracts/libraries/LibOrder.sol:LibOrder",
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "initialize(uint128,address,string,string)",
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])",
          "matchOrderWithoutPayback((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),uint256)",
          "setVault(address)",
          "withdrawETH(address,uint256)",
          "pause()",
          "unpause()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:97",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:98",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init_unchained",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:106",
            "parentContracts": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            },
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "53",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "54",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            },
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "104",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            },
            {
              "label": "_vault",
              "offset": 0,
              "slot": "155",
              "type": "t_address",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:69"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "156",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:636"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10687": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10684": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10694_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10725_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10718_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11074_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10718_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10684",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10687",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10694_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10733_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11084_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11062": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapVault.sol:EasySwapVault": {
        "src": "contracts/EasySwapVault.sol:11",
        "version": {
          "withMetadata": "41091549269e21fba1201a80451fed539faf51bb8e8e6b85476fd375a9f40ad9",
          "withoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac",
          "linkedWithoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapVault.sol:IEasySwapVault"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable"
        ],
        "methods": [
          "initialize()",
          "setOrderBook(address)",
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "editNFT(bytes32,bytes32)",
          "transferERC721(address,address,(uint256,address,uint96))",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "orderBook",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:15"
            },
            {
              "label": "ETHBalance",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:16"
            },
            {
              "label": "NFTBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:17"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:142"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderStorage.sol:OrderStorage": {
        "src": "contracts/OrderStorage.sol:11",
        "version": {
          "withMetadata": "536d6a84b1bb2551abf9caf0daab89e63983203ac0b4f37d737bd8973e375f11",
          "withoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c",
          "linkedWithoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary",
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getBestPrice(address,uint8)",
          "getNextBestPrice(address,uint8,uint128)",
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer",
            "src": "contracts/OrderStorage.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10687": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10684": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10694_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10725_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10718_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11074_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10718_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10684",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10687",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10694_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10733_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11084_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11062": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint128": {
              "label": "uint128"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderValidator.sol:OrderValidator": {
        "src": "contracts/OrderValidator.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ProtocolManager.sol:ProtocolManager": {
        "src": "contracts/ProtocolManager.sol:10",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "setProtocolShare(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook": {
        "src": "contracts/interface/IEasySwapOrderBook.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapVault.sol:IEasySwapVault": {
        "src": "contracts/interface/IEasySwapVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editNFT(bytes32,bytes32)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "transferERC721(address,address,(uint256,address,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IOrderStorage.sol:IOrderStorage": {
        "src": "contracts/interface/IOrderStorage.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibOrder.sol:LibOrder": {
        "src": "contracts/libraries/LibOrder.sol:8",
        "version": {
          "withMetadata": "d7bf40b83ff72d0d566adcae0b751efaed10bf2fd84d167ba5eb2a7144f37958",
          "withoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34",
          "linkedWithoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibPayInfo.sol:LibPayInfo": {
        "src": "contracts/libraries/LibPayInfo.sol:4",
        "version": {
          "withMetadata": "65523e9db1db0fa207c81f6ff34392b54d02b3bbb7724a7d84051d02b4409339",
          "withoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f",
          "linkedWithoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable": {
        "src": "contracts/libraries/LibTransferSafeUpgradeable.sol:11",
        "version": {
          "withMetadata": "58d63d3486f99002e4f7a645b94e5f1536228fa49573d9d11c89cac733ed981d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary": {
        "src": "contracts/libraries/RedBlackTreeLibrary.sol:18",
        "version": {
          "withMetadata": "53ccc608eb0b7dcb1871859a027bace5e31a287053208402809dadd544b3ffa0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/LibOrderTest.sol:LibOrderTest": {
        "src": "contracts/test/LibOrderTest.sol:6",
        "version": {
          "withMetadata": "10fb17c24a1abda13275f4083ab315eebbc8eed892c2e584ef32cf914f720578",
          "withoutMetadata": "64d1df9d7d8358ca62973e2453f07238f6d94eeab98c82e74ef749126701f8ca",
          "linkedWithoutMetadata": "64d1df9d7d8358ca62973e2453f07238f6d94eeab98c82e74ef749126701f8ca"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getOrderHash((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerTest.sol:ProtocolManagerTest": {
        "src": "contracts/test/ProtocolManagerTest.sol:6",
        "version": {
          "withMetadata": "a1f0ff4a703d8e3bfbe8333ec4c82692153faf679e221548871982f779f3cbdc",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerV2Test.sol:ProtocolManagerV2Test": {
        "src": "contracts/test/ProtocolManagerV2Test.sol:6",
        "version": {
          "withMetadata": "9d0875312cd2db3a70093c9b8133593c7fba007fce97066124182beb2745bbc3",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721.sol:TestERC721": {
        "src": "contracts/test/TestERC721.sol:7",
        "version": {
          "withMetadata": "c53dea8faa92899752c9c01573eab8d73495a234e1ce5706c69cad5dd09715ac",
          "withoutMetadata": "212c2ab4c7f4af3a06d25264220d75a17f42315ecd250cf23eb59652b9e80d60",
          "linkedWithoutMetadata": "212c2ab4c7f4af3a06d25264220d75a17f42315ecd250cf23eb59652b9e80d60"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "setTokenURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721",
            "src": "contracts/test/TestERC721.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_tokenURI",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "TestERC721",
              "src": "contracts/test/TestERC721.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721A.sol:Troll": {
        "src": "contracts/test/TestERC721A.sol:9",
        "version": {
          "withMetadata": "11cb263cf0441feb27b546fe1a786de19f4bc43f2138133d28027d72e3b1a8c1",
          "withoutMetadata": "8ee3adec7a060a9695be3dcac880fccce514c21a440fa95f1ea5bc09875f2a84",
          "linkedWithoutMetadata": "8ee3adec7a060a9695be3dcac880fccce514c21a440fa95f1ea5bc09875f2a84"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "erc721a/contracts/ERC721A.sol:ERC721A",
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)",
          "setMintStatus(bool)",
          "setTokenURI(string)",
          "withdrawETH()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Troll",
            "src": "contracts/test/TestERC721A.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "metaURI",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:10"
            },
            {
              "label": "mintStatus",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13346_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A": {
        "src": "erc721a/contracts/ERC721A.sol:36",
        "version": {
          "withMetadata": "700f6519a4ec7e96755d83f5854523337ab07810dcdb24c8c79f7133cfba1e22",
          "withoutMetadata": "1d2a1c2c152f7b0a0ff27a673eaa5be6f5ad9c0f97bfe83499c5d497d28f3179",
          "linkedWithoutMetadata": "1d2a1c2c152f7b0a0ff27a673eaa5be6f5ad9c0f97bfe83499c5d497d28f3179"
        },
        "inherit": [
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "totalSupply()",
          "balanceOf(address)",
          "supportsInterface(bytes4)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721A",
            "src": "erc721a/contracts/ERC721A.sol:140"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13346_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A__IERC721Receiver": {
        "src": "erc721a/contracts/ERC721A.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/IERC721A.sol:IERC721A": {
        "src": "erc721a/contracts/IERC721A.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "efc314da747cfd2872eacb095634776257ceb107b14b8c707b5e326e9393af13",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "b292e85bd4a962a72fffd2c045e93ce18f5aba5990e38766a221d62ff9924d79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "e94d6f2daef3271f4d1821e61f72164c52870cebc02b14b28411d626794a2b30",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "95ce0f798ff8345345c44057d47c0c7fe82ec12d230dbdc91265cb1e3aa18c2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "2a45b8eb93ddc2c812c3dd5b9862c2e13be2fbb5721b0fda9ed9f6b16a997d98",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapOrderBook.sol:EasySwapOrderBook": {
        "src": "contracts/EasySwapOrderBook.sol:22",
        "version": {
          "withMetadata": "9b2876941548b03f5c7770a5fac783032ded0bdbd12186e69b16776d1bf6f244",
          "withoutMetadata": "0b1fc23f14ed655ca016bed0a739f60188d07d3367c5ce63d8cf09eba563c933",
          "linkedWithoutMetadata": "0b1fc23f14ed655ca016bed0a739f60188d07d3367c5ce63d8cf09eba563c933"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "contracts/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "contracts/OrderStorage.sol:OrderStorage",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable",
          "contracts/libraries/LibOrder.sol:LibOrder",
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "initialize(uint128,address,string,string)",
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])",
          "matchOrderWithoutPayback((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),uint256)",
          "setVault(address)",
          "withdrawETH(address,uint256)",
          "pause()",
          "unpause()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:97",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:98",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init_unchained",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:106",
            "parentContracts": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            },
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "53",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "54",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            },
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "104",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            },
            {
              "label": "_vault",
              "offset": 0,
              "slot": "155",
              "type": "t_address",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:69"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "156",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:636"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10687": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10684": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10694_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10725_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10718_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11074_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10718_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10684",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10687",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10694_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10733_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11084_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11062": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapVault.sol:EasySwapVault": {
        "src": "contracts/EasySwapVault.sol:11",
        "version": {
          "withMetadata": "a40d89aa37eae19e235be445173f7fb188b7d39d0dd37f255d3a00ff62d8c930",
          "withoutMetadata": "67616b02e5d177203163c21ee4ee77d7d31488679dde0e6321d1d45d735be9c6",
          "linkedWithoutMetadata": "67616b02e5d177203163c21ee4ee77d7d31488679dde0e6321d1d45d735be9c6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapVault.sol:IEasySwapVault"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable"
        ],
        "methods": [
          "initialize()",
          "setOrderBook(address)",
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "editNFT(bytes32,bytes32)",
          "transferERC721(address,address,(uint256,address,uint96))",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "orderBook",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:15"
            },
            {
              "label": "ETHBalance",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:16"
            },
            {
              "label": "NFTBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:17"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:142"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderStorage.sol:OrderStorage": {
        "src": "contracts/OrderStorage.sol:11",
        "version": {
          "withMetadata": "cbac8944bb49e6c0277b380597d1af453dcba723fb4bdc95ace396d34459e4ee",
          "withoutMetadata": "f10ca0a0890072b3c4f50a797e1a79651d7a54d46e2062d2d97efdfdef26f9e4",
          "linkedWithoutMetadata": "f10ca0a0890072b3c4f50a797e1a79651d7a54d46e2062d2d97efdfdef26f9e4"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary",
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getBestPrice(address,uint8)",
          "getNextBestPrice(address,uint8,uint128)",
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer",
            "src": "contracts/OrderStorage.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10687": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10684": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10694_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10725_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10718_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11074_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10718_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10684",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10687",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10694_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10733_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11084_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11062": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint128": {
              "label": "uint128"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderValidator.sol:OrderValidator": {
        "src": "contracts/OrderValidator.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ProtocolManager.sol:ProtocolManager": {
        "src": "contracts/ProtocolManager.sol:10",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "setProtocolShare(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook": {
        "src": "contracts/interface/IEasySwapOrderBook.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapVault.sol:IEasySwapVault": {
        "src": "contracts/interface/IEasySwapVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editNFT(bytes32,bytes32)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "transferERC721(address,address,(uint256,address,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IOrderStorage.sol:IOrderStorage": {
        "src": "contracts/interface/IOrderStorage.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibOrder.sol:LibOrder": {
        "src": "contracts/libraries/LibOrder.sol:8",
        "version": {
          "withMetadata": "4972f70bf640bc4bc99d8e6f3ae7b9f5f0dded5a4e6bd23015c3f84e3cfa273c",
          "withoutMetadata": "f15de615dadcc4ae17d6fc5ed86d5183535a379dcda0096e29f62a450b3cd6ad",
          "linkedWithoutMetadata": "f15de615dadcc4ae17d6fc5ed86d5183535a379dcda0096e29f62a450b3cd6ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibPayInfo.sol:LibPayInfo": {
        "src": "contracts/libraries/LibPayInfo.sol:4",
        "version": {
          "withMetadata": "9e4c69c7b2d4a445c70652ecf92faa91ab2f026a51caec77ee496678292b0d36",
          "withoutMetadata": "b6d0486c2bddede4c20fd458052398d6cab6dbc1313a2ccb5b8a6f5af97bdc69",
          "linkedWithoutMetadata": "b6d0486c2bddede4c20fd458052398d6cab6dbc1313a2ccb5b8a6f5af97bdc69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable": {
        "src": "contracts/libraries/LibTransferSafeUpgradeable.sol:11",
        "version": {
          "withMetadata": "ea74f334dbf153d7b9ecd8c209b7ea86dbb39e7c63f85d7c864437f6d1bccf53",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary": {
        "src": "contracts/libraries/RedBlackTreeLibrary.sol:18",
        "version": {
          "withMetadata": "e067602aa313941348559a1c7cd85cf977ffd715bc7075d5d3e1153b1111d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/LibOrderTest.sol:LibOrderTest": {
        "src": "contracts/test/LibOrderTest.sol:6",
        "version": {
          "withMetadata": "2741d78041298932d9e6009ed2fc3bd200bb32e2fd258573265c593e0bc94517",
          "withoutMetadata": "71f3e1948c9bb24b9d9bbee20c1c48a3f8b102277efea4ca3b7cb7ebb250650a",
          "linkedWithoutMetadata": "71f3e1948c9bb24b9d9bbee20c1c48a3f8b102277efea4ca3b7cb7ebb250650a"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getOrderHash((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerTest.sol:ProtocolManagerTest": {
        "src": "contracts/test/ProtocolManagerTest.sol:6",
        "version": {
          "withMetadata": "fb635cfbc02be6be58d5d36f0ff2092968e232d87fd3c48247b6dab2886ab5bf",
          "withoutMetadata": "c309a2ebac9d53dd61e42cb0ccbc572c9b3c9b2868504d4d1c94ebdf41ff0376",
          "linkedWithoutMetadata": "c309a2ebac9d53dd61e42cb0ccbc572c9b3c9b2868504d4d1c94ebdf41ff0376"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerV2Test.sol:ProtocolManagerV2Test": {
        "src": "contracts/test/ProtocolManagerV2Test.sol:6",
        "version": {
          "withMetadata": "f0802dcc737e7cf1d8ece9057d11b4274b3998f3c0dd09464d3f7fa6556fa787",
          "withoutMetadata": "c309a2ebac9d53dd61e42cb0ccbc572c9b3c9b2868504d4d1c94ebdf41ff0376",
          "linkedWithoutMetadata": "c309a2ebac9d53dd61e42cb0ccbc572c9b3c9b2868504d4d1c94ebdf41ff0376"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721.sol:TestERC721": {
        "src": "contracts/test/TestERC721.sol:7",
        "version": {
          "withMetadata": "39dc143af8d8f77490334ca6ffbabe83e62a34d9df9274be73798b7eba33221f",
          "withoutMetadata": "bfad91b2ca8b369442df5bab54ecd5920a65777e49ef64fd72b18d6a873da1a7",
          "linkedWithoutMetadata": "bfad91b2ca8b369442df5bab54ecd5920a65777e49ef64fd72b18d6a873da1a7"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "setTokenURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721",
            "src": "contracts/test/TestERC721.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_tokenURI",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "TestERC721",
              "src": "contracts/test/TestERC721.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721A.sol:Troll": {
        "src": "contracts/test/TestERC721A.sol:9",
        "version": {
          "withMetadata": "6bcdeec0d5d7273e91063d571d8c1a041dcb9b2aec0850bd3c670912bbf5bc58",
          "withoutMetadata": "663a1f37cf151f92b8a438635749027b61eeea56c22b4975d1aa1890233e1337",
          "linkedWithoutMetadata": "663a1f37cf151f92b8a438635749027b61eeea56c22b4975d1aa1890233e1337"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "erc721a/contracts/ERC721A.sol:ERC721A",
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)",
          "setMintStatus(bool)",
          "setTokenURI(string)",
          "withdrawETH()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Troll",
            "src": "contracts/test/TestERC721A.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "metaURI",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:10"
            },
            {
              "label": "mintStatus",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13346_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A": {
        "src": "erc721a/contracts/ERC721A.sol:36",
        "version": {
          "withMetadata": "3610c984f1e1acbdf688d54c754ecd057719ee04938b7229d8ddc443d7070541",
          "withoutMetadata": "5e2f0ad71b3f4e025015ee852aed01bf2a08a9897a5c8a3fbc8c3c85950095a4",
          "linkedWithoutMetadata": "5e2f0ad71b3f4e025015ee852aed01bf2a08a9897a5c8a3fbc8c3c85950095a4"
        },
        "inherit": [
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "totalSupply()",
          "balanceOf(address)",
          "supportsInterface(bytes4)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721A",
            "src": "erc721a/contracts/ERC721A.sol:140"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13346_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A__IERC721Receiver": {
        "src": "erc721a/contracts/ERC721A.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/IERC721A.sol:IERC721A": {
        "src": "erc721a/contracts/IERC721A.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "efc314da747cfd2872eacb095634776257ceb107b14b8c707b5e326e9393af13",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "b292e85bd4a962a72fffd2c045e93ce18f5aba5990e38766a221d62ff9924d79",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "e94d6f2daef3271f4d1821e61f72164c52870cebc02b14b28411d626794a2b30",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "95ce0f798ff8345345c44057d47c0c7fe82ec12d230dbdc91265cb1e3aa18c2c",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "2a45b8eb93ddc2c812c3dd5b9862c2e13be2fbb5721b0fda9ed9f6b16a997d98",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapOrderBook.sol:EasySwapOrderBook": {
        "src": "contracts/EasySwapOrderBook.sol:22",
        "version": {
          "withMetadata": "9b2876941548b03f5c7770a5fac783032ded0bdbd12186e69b16776d1bf6f244",
          "withoutMetadata": "0b1fc23f14ed655ca016bed0a739f60188d07d3367c5ce63d8cf09eba563c933",
          "linkedWithoutMetadata": "0b1fc23f14ed655ca016bed0a739f60188d07d3367c5ce63d8cf09eba563c933"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "contracts/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "contracts/OrderStorage.sol:OrderStorage",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable",
          "contracts/libraries/LibOrder.sol:LibOrder",
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "initialize(uint128,address,string,string)",
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])",
          "matchOrderWithoutPayback((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),uint256)",
          "setVault(address)",
          "withdrawETH(address,uint256)",
          "pause()",
          "unpause()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:97",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:98",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init_unchained",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:106",
            "parentContracts": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            },
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "53",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "54",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            },
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "104",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            },
            {
              "label": "_vault",
              "offset": 0,
              "slot": "155",
              "type": "t_address",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:69"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "156",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:636"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10687": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10684": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10694_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10725_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10718_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11074_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10718_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10684",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10687",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10694_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10733_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11084_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11062": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapVault.sol:EasySwapVault": {
        "src": "contracts/EasySwapVault.sol:11",
        "version": {
          "withMetadata": "a40d89aa37eae19e235be445173f7fb188b7d39d0dd37f255d3a00ff62d8c930",
          "withoutMetadata": "67616b02e5d177203163c21ee4ee77d7d31488679dde0e6321d1d45d735be9c6",
          "linkedWithoutMetadata": "67616b02e5d177203163c21ee4ee77d7d31488679dde0e6321d1d45d735be9c6"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapVault.sol:IEasySwapVault"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable"
        ],
        "methods": [
          "initialize()",
          "setOrderBook(address)",
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "editNFT(bytes32,bytes32)",
          "transferERC721(address,address,(uint256,address,uint96))",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "orderBook",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:15"
            },
            {
              "label": "ETHBalance",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:16"
            },
            {
              "label": "NFTBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:17"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:142"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderStorage.sol:OrderStorage": {
        "src": "contracts/OrderStorage.sol:11",
        "version": {
          "withMetadata": "cbac8944bb49e6c0277b380597d1af453dcba723fb4bdc95ace396d34459e4ee",
          "withoutMetadata": "f10ca0a0890072b3c4f50a797e1a79651d7a54d46e2062d2d97efdfdef26f9e4",
          "linkedWithoutMetadata": "f10ca0a0890072b3c4f50a797e1a79651d7a54d46e2062d2d97efdfdef26f9e4"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary",
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getBestPrice(address,uint8)",
          "getNextBestPrice(address,uint8,uint128)",
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer",
            "src": "contracts/OrderStorage.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10687": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10684": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10694_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10725_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10718_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11074_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10718_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10684",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10687",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10694_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10733_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11084_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11062": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint128": {
              "label": "uint128"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderValidator.sol:OrderValidator": {
        "src": "contracts/OrderValidator.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ProtocolManager.sol:ProtocolManager": {
        "src": "contracts/ProtocolManager.sol:10",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "setProtocolShare(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook": {
        "src": "contracts/interface/IEasySwapOrderBook.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapVault.sol:IEasySwapVault": {
        "src": "contracts/interface/IEasySwapVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editNFT(bytes32,bytes32)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "transferERC721(address,address,(uint256,address,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IOrderStorage.sol:IOrderStorage": {
        "src": "contracts/interface/IOrderStorage.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibOrder.sol:LibOrder": {
        "src": "contracts/libraries/LibOrder.sol:8",
        "version": {
          "withMetadata": "4972f70bf640bc4bc99d8e6f3ae7b9f5f0dded5a4e6bd23015c3f84e3cfa273c",
          "withoutMetadata": "f15de615dadcc4ae17d6fc5ed86d5183535a379dcda0096e29f62a450b3cd6ad",
          "linkedWithoutMetadata": "f15de615dadcc4ae17d6fc5ed86d5183535a379dcda0096e29f62a450b3cd6ad"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibPayInfo.sol:LibPayInfo": {
        "src": "contracts/libraries/LibPayInfo.sol:4",
        "version": {
          "withMetadata": "9e4c69c7b2d4a445c70652ecf92faa91ab2f026a51caec77ee496678292b0d36",
          "withoutMetadata": "b6d0486c2bddede4c20fd458052398d6cab6dbc1313a2ccb5b8a6f5af97bdc69",
          "linkedWithoutMetadata": "b6d0486c2bddede4c20fd458052398d6cab6dbc1313a2ccb5b8a6f5af97bdc69"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable": {
        "src": "contracts/libraries/LibTransferSafeUpgradeable.sol:11",
        "version": {
          "withMetadata": "ea74f334dbf153d7b9ecd8c209b7ea86dbb39e7c63f85d7c864437f6d1bccf53",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary": {
        "src": "contracts/libraries/RedBlackTreeLibrary.sol:18",
        "version": {
          "withMetadata": "e067602aa313941348559a1c7cd85cf977ffd715bc7075d5d3e1153b1111d9a8",
          "withoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db",
          "linkedWithoutMetadata": "a64c6cf9c6ba9368f5132c93a0196b3204a7963dbb4dd05dfddb4ab23126b8db"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/LibOrderTest.sol:LibOrderTest": {
        "src": "contracts/test/LibOrderTest.sol:6",
        "version": {
          "withMetadata": "2741d78041298932d9e6009ed2fc3bd200bb32e2fd258573265c593e0bc94517",
          "withoutMetadata": "71f3e1948c9bb24b9d9bbee20c1c48a3f8b102277efea4ca3b7cb7ebb250650a",
          "linkedWithoutMetadata": "71f3e1948c9bb24b9d9bbee20c1c48a3f8b102277efea4ca3b7cb7ebb250650a"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getOrderHash((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerTest.sol:ProtocolManagerTest": {
        "src": "contracts/test/ProtocolManagerTest.sol:6",
        "version": {
          "withMetadata": "fb635cfbc02be6be58d5d36f0ff2092968e232d87fd3c48247b6dab2886ab5bf",
          "withoutMetadata": "c309a2ebac9d53dd61e42cb0ccbc572c9b3c9b2868504d4d1c94ebdf41ff0376",
          "linkedWithoutMetadata": "c309a2ebac9d53dd61e42cb0ccbc572c9b3c9b2868504d4d1c94ebdf41ff0376"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerV2Test.sol:ProtocolManagerV2Test": {
        "src": "contracts/test/ProtocolManagerV2Test.sol:6",
        "version": {
          "withMetadata": "f0802dcc737e7cf1d8ece9057d11b4274b3998f3c0dd09464d3f7fa6556fa787",
          "withoutMetadata": "c309a2ebac9d53dd61e42cb0ccbc572c9b3c9b2868504d4d1c94ebdf41ff0376",
          "linkedWithoutMetadata": "c309a2ebac9d53dd61e42cb0ccbc572c9b3c9b2868504d4d1c94ebdf41ff0376"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721.sol:TestERC721": {
        "src": "contracts/test/TestERC721.sol:7",
        "version": {
          "withMetadata": "39dc143af8d8f77490334ca6ffbabe83e62a34d9df9274be73798b7eba33221f",
          "withoutMetadata": "bfad91b2ca8b369442df5bab54ecd5920a65777e49ef64fd72b18d6a873da1a7",
          "linkedWithoutMetadata": "bfad91b2ca8b369442df5bab54ecd5920a65777e49ef64fd72b18d6a873da1a7"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "setTokenURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721",
            "src": "contracts/test/TestERC721.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_tokenURI",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "TestERC721",
              "src": "contracts/test/TestERC721.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721A.sol:Troll": {
        "src": "contracts/test/TestERC721A.sol:9",
        "version": {
          "withMetadata": "6bcdeec0d5d7273e91063d571d8c1a041dcb9b2aec0850bd3c670912bbf5bc58",
          "withoutMetadata": "663a1f37cf151f92b8a438635749027b61eeea56c22b4975d1aa1890233e1337",
          "linkedWithoutMetadata": "663a1f37cf151f92b8a438635749027b61eeea56c22b4975d1aa1890233e1337"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "erc721a/contracts/ERC721A.sol:ERC721A",
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)",
          "setMintStatus(bool)",
          "setTokenURI(string)",
          "withdrawETH()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Troll",
            "src": "contracts/test/TestERC721A.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "metaURI",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:10"
            },
            {
              "label": "mintStatus",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13346_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A": {
        "src": "erc721a/contracts/ERC721A.sol:36",
        "version": {
          "withMetadata": "3610c984f1e1acbdf688d54c754ecd057719ee04938b7229d8ddc443d7070541",
          "withoutMetadata": "5e2f0ad71b3f4e025015ee852aed01bf2a08a9897a5c8a3fbc8c3c85950095a4",
          "linkedWithoutMetadata": "5e2f0ad71b3f4e025015ee852aed01bf2a08a9897a5c8a3fbc8c3c85950095a4"
        },
        "inherit": [
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "totalSupply()",
          "balanceOf(address)",
          "supportsInterface(bytes4)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721A",
            "src": "erc721a/contracts/ERC721A.sol:140"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13346_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A__IERC721Receiver": {
        "src": "erc721a/contracts/ERC721A.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/IERC721A.sol:IERC721A": {
        "src": "erc721a/contracts/IERC721A.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    },
    {
      "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:56",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors",
          "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata",
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC20": [
              {
                "contract": "ERC20Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_allowances",
                "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_totalSupply",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
              },
              {
                "contract": "ERC20Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:ERC721Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ERC721": [
              {
                "contract": "ERC721Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:27"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_symbol",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:30"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_owners",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:32"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_balances",
                "type": "t_mapping(t_address,t_uint256)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:34"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_tokenApprovals",
                "type": "t_mapping(t_uint256,t_address)",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:36"
              },
              {
                "contract": "ERC721Upgradeable",
                "label": "_operatorApprovals",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
                "src": "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol:38"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:17",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:18",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:23",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32",
        "inherit": [
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils"
        ],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:ERC165Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:21",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/access/Ownable.sol:Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_owner",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267": {
        "src": "@openzeppelin/contracts/interfaces/IERC5267.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "eip712Domain()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC1155Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:113",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC20Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors": {
        "src": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:55",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:9",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:11",
        "inherit": [
          "@openzeppelin/contracts/token/ERC20/IERC20.sol:IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:19",
        "inherit": [
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721",
            "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:39"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721.sol:11",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:IERC721Receiver": {
        "src": "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:17",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)",
          "tokenOfOwnerByIndex(address,uint256)",
          "totalSupply()",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "tokenOfOwnerByIndex(address,uint256)",
          "tokenByIndex(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata": {
        "src": "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:12",
        "inherit": [
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Context.sol:Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:16",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:44"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_status",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/Strings.sol:Strings": {
        "src": "@openzeppelin/contracts/utils/Strings.sol:12",
        "version": {
          "withMetadata": "08e138b442cb26161e22a62c664b16118323c8ebb14745c6df0f2bbb68c7f776",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/math/Math.sol:Math",
          "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:ECDSA": {
        "src": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol:12",
        "version": {
          "withMetadata": "b9a8105ce8d9eafa8cab0f5662c08dd2e1da66de1d186e63138b776fc19224e8",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:MessageHashUtils": {
        "src": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol:15",
        "version": {
          "withMetadata": "94cc7a9fbb8377b816e34b431fc2e3f418e5428b3a44a1eca4d0ee15f06a561e",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [
          "@openzeppelin/contracts/utils/Strings.sol:Strings"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:20",
        "inherit": [
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/Math.sol:Math": {
        "src": "@openzeppelin/contracts/utils/math/Math.sol:9",
        "version": {
          "withMetadata": "ff891902670b20c6503803a659049f2fa056a691ba4c3d8c374ed8ebf902e157",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "@openzeppelin/contracts/utils/math/SignedMath.sol:SignedMath": {
        "src": "@openzeppelin/contracts/utils/math/SignedMath.sol:9",
        "version": {
          "withMetadata": "76620204b4a92ad3730c940b65fd75d31ddb19392b6c8c71f455e52818db387a",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapOrderBook.sol:EasySwapOrderBook": {
        "src": "contracts/EasySwapOrderBook.sol:22",
        "version": {
          "withMetadata": "43ba8a7ec3411fcb3b2987f208820a9b90c1b2db501c09338e78447c3b2a5ad9",
          "withoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43",
          "linkedWithoutMetadata": "04200f128857feb3693c3794b2519675396ce1150b05e4e318db84b3879b9e43"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "contracts/OrderValidator.sol:OrderValidator",
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "contracts/OrderStorage.sol:OrderStorage",
          "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:PausableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable",
          "contracts/libraries/LibOrder.sol:LibOrder",
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "initialize(uint128,address,string,string)",
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])",
          "matchOrderWithoutPayback((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),uint256)",
          "setVault(address)",
          "withdrawETH(address,uint256)",
          "pause()",
          "unpause()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:82",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:97",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "incorrect-initializer-order",
            "src": "contracts/EasySwapOrderBook.sol:98",
            "expectedLinearization": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ],
            "foundOrder": [
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OwnableUpgradeable",
              "EIP712Upgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init_unchained",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "duplicate-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:102",
            "parentInitializer": "__Ownable_init",
            "parentContract": "OwnableUpgradeable"
          },
          {
            "kind": "missing-initializer-call",
            "src": "contracts/EasySwapOrderBook.sol:106",
            "parentContracts": [
              "OwnableUpgradeable",
              "ReentrancyGuardUpgradeable",
              "PausableUpgradeable",
              "OrderValidator",
              "ProtocolManager"
            ]
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            },
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "53",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "54",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            },
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "104",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "105",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            },
            {
              "label": "_vault",
              "offset": 0,
              "slot": "155",
              "type": "t_address",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:69"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "156",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapOrderBook",
              "src": "contracts/EasySwapOrderBook.sol:636"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10687": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10684": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10694_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10725_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10718_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11074_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10718_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10684",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10687",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10694_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10733_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11084_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11062": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Pausable": [
              {
                "contract": "PausableUpgradeable",
                "label": "_paused",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:21"
              }
            ],
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/EasySwapVault.sol:EasySwapVault": {
        "src": "contracts/EasySwapVault.sol:11",
        "version": {
          "withMetadata": "41091549269e21fba1201a80451fed539faf51bb8e8e6b85476fd375a9f40ad9",
          "withoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac",
          "linkedWithoutMetadata": "75a2574e2b91d06c3bd35f809b8c5fae7c101c6a15878bf325b05b6b5438fcac"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
          "contracts/interface/IEasySwapVault.sol:IEasySwapVault"
        ],
        "libraries": [
          "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable"
        ],
        "methods": [
          "initialize()",
          "setOrderBook(address)",
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "editNFT(bytes32,bytes32)",
          "transferERC721(address,address,(uint256,address,uint96))",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "onERC721Received(address,address,uint256,bytes)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "orderBook",
              "offset": 0,
              "slot": "0",
              "type": "t_address",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:15"
            },
            {
              "label": "ETHBalance",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:16"
            },
            {
              "label": "NFTBalance",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:17"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "EasySwapVault",
              "src": "contracts/EasySwapVault.sol:142"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderStorage.sol:OrderStorage": {
        "src": "contracts/OrderStorage.sol:11",
        "version": {
          "withMetadata": "536d6a84b1bb2551abf9caf0daab89e63983203ac0b4f37d737bd8973e375f11",
          "withoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c",
          "linkedWithoutMetadata": "947aae173ed8ff4c2b53243f0c26957426835cfc5aa4b3f0ce10b39609ab078c"
        },
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:ReentrancyGuardUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary",
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getBestPrice(address,uint8)",
          "getNextBestPrice(address,uint8,uint128)",
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "missing-initializer",
            "src": "contracts/OrderStorage.sol:11"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "orders",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:15"
            },
            {
              "label": "priceTrees",
              "offset": 0,
              "slot": "1",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:18"
            },
            {
              "label": "orderQueues",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:22"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "3",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderStorage",
              "src": "contracts/OrderStorage.sol:322"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_enum(SaleKind)10687": {
              "label": "enum LibOrder.SaleKind",
              "members": [
                "FixedPriceForCollection",
                "FixedPriceForItem"
              ],
              "numberOfBytes": "1"
            },
            "t_enum(Side)10684": {
              "label": "enum LibOrder.Side",
              "members": [
                "List",
                "Bid"
              ],
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue)))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage))": {
              "label": "mapping(address => mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage))": {
              "label": "mapping(enum LibOrder.Side => mapping(Price => struct LibOrder.OrderQueue))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_enum(Side)10684,t_struct(Tree)11084_storage)": {
              "label": "mapping(enum LibOrder.Side => struct RedBlackTreeLibrary.Tree)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_struct(DBOrder)10725_storage)": {
              "label": "mapping(OrderKey => struct LibOrder.DBOrder)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)": {
              "label": "mapping(Price => struct RedBlackTreeLibrary.Node)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_userDefinedValueType(Price)11062,t_struct(OrderQueue)10733_storage)": {
              "label": "mapping(Price => struct LibOrder.OrderQueue)",
              "numberOfBytes": "32"
            },
            "t_struct(Asset)10694_storage": {
              "label": "struct LibOrder.Asset",
              "members": [
                {
                  "label": "tokenId",
                  "type": "t_uint256",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "collection",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "amount",
                  "type": "t_uint96",
                  "offset": 20,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(DBOrder)10725_storage": {
              "label": "struct LibOrder.DBOrder",
              "members": [
                {
                  "label": "order",
                  "type": "t_struct(Order)10718_storage",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "next",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "4"
                }
              ],
              "numberOfBytes": "160"
            },
            "t_struct(Node)11074_storage": {
              "label": "struct RedBlackTreeLibrary.Node",
              "members": [
                {
                  "label": "parent",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "left",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 16,
                  "slot": "0"
                },
                {
                  "label": "right",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "red",
                  "type": "t_uint8",
                  "offset": 16,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Order)10718_storage": {
              "label": "struct LibOrder.Order",
              "members": [
                {
                  "label": "side",
                  "type": "t_enum(Side)10684",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "saleKind",
                  "type": "t_enum(SaleKind)10687",
                  "offset": 1,
                  "slot": "0"
                },
                {
                  "label": "maker",
                  "type": "t_address",
                  "offset": 2,
                  "slot": "0"
                },
                {
                  "label": "nft",
                  "type": "t_struct(Asset)10694_storage",
                  "offset": 0,
                  "slot": "1"
                },
                {
                  "label": "price",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "3"
                },
                {
                  "label": "expiry",
                  "type": "t_uint64",
                  "offset": 16,
                  "slot": "3"
                },
                {
                  "label": "salt",
                  "type": "t_uint64",
                  "offset": 24,
                  "slot": "3"
                }
              ],
              "numberOfBytes": "128"
            },
            "t_struct(OrderQueue)10733_storage": {
              "label": "struct LibOrder.OrderQueue",
              "members": [
                {
                  "label": "head",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "tail",
                  "type": "t_userDefinedValueType(OrderKey)10681",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_struct(Tree)11084_storage": {
              "label": "struct RedBlackTreeLibrary.Tree",
              "members": [
                {
                  "label": "root",
                  "type": "t_userDefinedValueType(Price)11062",
                  "offset": 0,
                  "slot": "0"
                },
                {
                  "label": "nodes",
                  "type": "t_mapping(t_userDefinedValueType(Price)11062,t_struct(Node)11074_storage)",
                  "offset": 0,
                  "slot": "1"
                }
              ],
              "numberOfBytes": "64"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_uint64": {
              "label": "uint64",
              "numberOfBytes": "8"
            },
            "t_uint8": {
              "label": "uint8",
              "numberOfBytes": "1"
            },
            "t_uint96": {
              "label": "uint96",
              "numberOfBytes": "12"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_userDefinedValueType(Price)11062": {
              "label": "Price",
              "numberOfBytes": "16",
              "underlying": "t_uint128"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_uint128": {
              "label": "uint128"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.ReentrancyGuard": [
              {
                "contract": "ReentrancyGuardUpgradeable",
                "label": "_status",
                "type": "t_uint256",
                "src": "@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol:40"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/OrderValidator.sol:OrderValidator": {
        "src": "contracts/OrderValidator.sol:14",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:EIP712Upgradeable",
          "@openzeppelin/contracts/interfaces/IERC5267.sol:IERC5267",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "filledAmount",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:26"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "OrderValidator",
              "src": "contracts/OrderValidator.sol:107"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_mapping(t_userDefinedValueType(OrderKey)10681,t_uint256)": {
              "label": "mapping(OrderKey => uint256)",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_userDefinedValueType(OrderKey)10681": {
              "label": "OrderKey",
              "numberOfBytes": "32",
              "underlying": "t_bytes32"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.EIP712": [
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedName",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:39"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_hashedVersion",
                "type": "t_bytes32",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:41"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_name",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:43"
              },
              {
                "contract": "EIP712Upgradeable",
                "label": "_version",
                "type": "t_string_storage",
                "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:44"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/ProtocolManager.sol:ProtocolManager": {
        "src": "contracts/ProtocolManager.sol:10",
        "inherit": [
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [
          "contracts/libraries/LibPayInfo.sol:LibPayInfo"
        ],
        "methods": [
          "setProtocolShare(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapOrderBook.sol:IEasySwapOrderBook": {
        "src": "contracts/interface/IEasySwapOrderBook.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "makeOrders(struct LibOrder.Order[])",
          "cancelOrders(OrderKey[])",
          "editOrders(struct LibOrder.EditDetail[])",
          "matchOrder((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64),(uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))",
          "matchOrders(struct LibOrder.MatchDetail[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IEasySwapVault.sol:IEasySwapVault": {
        "src": "contracts/interface/IEasySwapVault.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(bytes32)",
          "depositETH(bytes32,uint256)",
          "withdrawETH(bytes32,uint256,address)",
          "depositNFT(bytes32,address,address,uint256)",
          "withdrawNFT(bytes32,address,address,uint256)",
          "editNFT(bytes32,bytes32)",
          "editETH(bytes32,bytes32,uint256,uint256,address)",
          "batchTransferERC721(address,struct LibOrder.NFTInfo[])",
          "transferERC721(address,address,(uint256,address,uint96))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/interface/IOrderStorage.sol:IOrderStorage": {
        "src": "contracts/interface/IOrderStorage.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getOrders(address,uint256,uint8,uint8,uint256,uint128,bytes32)",
          "getBestOrder(address,uint256,uint8,uint8)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibOrder.sol:LibOrder": {
        "src": "contracts/libraries/LibOrder.sol:8",
        "version": {
          "withMetadata": "d7bf40b83ff72d0d566adcae0b751efaed10bf2fd84d167ba5eb2a7144f37958",
          "withoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34",
          "linkedWithoutMetadata": "f67e2cb9fe6f69d34eb981274c8188756c0727ed41b3530c1252138484dddf34"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibPayInfo.sol:LibPayInfo": {
        "src": "contracts/libraries/LibPayInfo.sol:4",
        "version": {
          "withMetadata": "65523e9db1db0fa207c81f6ff34392b54d02b3bbb7724a7d84051d02b4409339",
          "withoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f",
          "linkedWithoutMetadata": "b4a16ffcd9956f859d2327870a63d8928f092b2808aa1c91fa8ae9a2c173346f"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/LibTransferSafeUpgradeable.sol:LibTransferSafeUpgradeable": {
        "src": "contracts/libraries/LibTransferSafeUpgradeable.sol:11",
        "version": {
          "withMetadata": "58d63d3486f99002e4f7a645b94e5f1536228fa49573d9d11c89cac733ed981d",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/libraries/RedBlackTreeLibrary.sol:RedBlackTreeLibrary": {
        "src": "contracts/libraries/RedBlackTreeLibrary.sol:18",
        "version": {
          "withMetadata": "53ccc608eb0b7dcb1871859a027bace5e31a287053208402809dadd544b3ffa0",
          "withoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a",
          "linkedWithoutMetadata": "e2a89a66865458f0d9fedd4bc7faf0ee62e4c341d176ab79d29bd77a1bdfc32a"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/LibOrderTest.sol:LibOrderTest": {
        "src": "contracts/test/LibOrderTest.sol:6",
        "version": {
          "withMetadata": "10fb17c24a1abda13275f4083ab315eebbc8eed892c2e584ef32cf914f720578",
          "withoutMetadata": "64d1df9d7d8358ca62973e2453f07238f6d94eeab98c82e74ef749126701f8ca",
          "linkedWithoutMetadata": "64d1df9d7d8358ca62973e2453f07238f6d94eeab98c82e74ef749126701f8ca"
        },
        "inherit": [],
        "libraries": [
          "contracts/libraries/LibOrder.sol:LibOrder"
        ],
        "methods": [
          "getOrderHash((uint8,uint8,address,(uint256,address,uint96),uint128,uint64,uint64))"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerTest.sol:ProtocolManagerTest": {
        "src": "contracts/test/ProtocolManagerTest.sol:6",
        "version": {
          "withMetadata": "a1f0ff4a703d8e3bfbe8333ec4c82692153faf679e221548871982f779f3cbdc",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/ProtocolManagerV2Test.sol:ProtocolManagerV2Test": {
        "src": "contracts/test/ProtocolManagerV2Test.sol:6",
        "version": {
          "withMetadata": "9d0875312cd2db3a70093c9b8133593c7fba007fce97066124182beb2745bbc3",
          "withoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4",
          "linkedWithoutMetadata": "4b238e95207f5ba47c8a0c88456c8581ed1b15a3f438b09134a6f1f4c5fad0d4"
        },
        "inherit": [
          "contracts/ProtocolManager.sol:ProtocolManager",
          "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
          "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
          "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "label": "protocolShare",
              "offset": 0,
              "slot": "0",
              "type": "t_uint128",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:14"
            },
            {
              "label": "__gap",
              "offset": 0,
              "slot": "1",
              "type": "t_array(t_uint256)50_storage",
              "contract": "ProtocolManager",
              "src": "contracts/ProtocolManager.sol:48"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]",
              "numberOfBytes": "1600"
            },
            "t_uint128": {
              "label": "uint128",
              "numberOfBytes": "16"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {
            "erc7201:openzeppelin.storage.Ownable": [
              {
                "contract": "OwnableUpgradeable",
                "label": "_owner",
                "type": "t_address",
                "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:24"
              }
            ],
            "erc7201:openzeppelin.storage.Initializable": [
              {
                "contract": "Initializable",
                "label": "_initialized",
                "type": "t_uint64",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:69"
              },
              {
                "contract": "Initializable",
                "label": "_initializing",
                "type": "t_bool",
                "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:73"
              }
            ]
          }
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721.sol:TestERC721": {
        "src": "contracts/test/TestERC721.sol:7",
        "version": {
          "withMetadata": "c53dea8faa92899752c9c01573eab8d73495a234e1ce5706c69cad5dd09715ac",
          "withoutMetadata": "212c2ab4c7f4af3a06d25264220d75a17f42315ecd250cf23eb59652b9e80d60",
          "linkedWithoutMetadata": "212c2ab4c7f4af3a06d25264220d75a17f42315ecd250cf23eb59652b9e80d60"
        },
        "inherit": [
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:ERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol:IERC721Enumerable",
          "@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721",
          "@openzeppelin/contracts/interfaces/draft-IERC6093.sol:IERC721Errors",
          "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol:IERC721Metadata",
          "@openzeppelin/contracts/token/ERC721/IERC721.sol:IERC721",
          "@openzeppelin/contracts/utils/introspection/ERC165.sol:ERC165",
          "@openzeppelin/contracts/utils/introspection/IERC165.sol:IERC165",
          "@openzeppelin/contracts/utils/Context.sol:Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "setTokenURI(string)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TestERC721",
            "src": "contracts/test/TestERC721.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_name",
              "offset": 0,
              "slot": "0",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:23"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "1",
              "type": "t_string_storage",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:26"
            },
            {
              "label": "_owners",
              "offset": 0,
              "slot": "2",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:28"
            },
            {
              "label": "_balances",
              "offset": 0,
              "slot": "3",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:30"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_address)",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:32"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721",
              "src": "@openzeppelin/contracts/token/ERC721/ERC721.sol:34"
            },
            {
              "label": "_ownedTokens",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:18"
            },
            {
              "label": "_ownedTokensIndex",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:19"
            },
            {
              "label": "_allTokens",
              "offset": 0,
              "slot": "8",
              "type": "t_array(t_uint256)dyn_storage",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:21"
            },
            {
              "label": "_allTokensIndex",
              "offset": 0,
              "slot": "9",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721Enumerable",
              "src": "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol:22"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "10",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_tokenURI",
              "offset": 0,
              "slot": "11",
              "type": "t_string_storage",
              "contract": "TestERC721",
              "src": "contracts/test/TestERC721.sol:8"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_array(t_uint256)dyn_storage": {
              "label": "uint256[]",
              "numberOfBytes": "32"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
              "label": "mapping(address => mapping(uint256 => uint256))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_address)": {
              "label": "mapping(uint256 => address)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "contracts/test/TestERC721A.sol:Troll": {
        "src": "contracts/test/TestERC721A.sol:9",
        "version": {
          "withMetadata": "11cb263cf0441feb27b546fe1a786de19f4bc43f2138133d28027d72e3b1a8c1",
          "withoutMetadata": "8ee3adec7a060a9695be3dcac880fccce514c21a440fa95f1ea5bc09875f2a84",
          "linkedWithoutMetadata": "8ee3adec7a060a9695be3dcac880fccce514c21a440fa95f1ea5bc09875f2a84"
        },
        "inherit": [
          "@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard",
          "@openzeppelin/contracts/access/Ownable.sol:Ownable",
          "@openzeppelin/contracts/utils/Context.sol:Context",
          "erc721a/contracts/ERC721A.sol:ERC721A",
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)",
          "tokenURI(uint256)",
          "supportsInterface(bytes4)",
          "setMintStatus(bool)",
          "setTokenURI(string)",
          "withdrawETH()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Troll",
            "src": "contracts/test/TestERC721A.sol:16"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            },
            {
              "label": "_owner",
              "offset": 0,
              "slot": "8",
              "type": "t_address",
              "contract": "Ownable",
              "src": "@openzeppelin/contracts/access/Ownable.sol:21"
            },
            {
              "label": "_status",
              "offset": 0,
              "slot": "9",
              "type": "t_uint256",
              "contract": "ReentrancyGuard",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:37"
            },
            {
              "label": "metaURI",
              "offset": 0,
              "slot": "10",
              "type": "t_string_storage",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:10"
            },
            {
              "label": "mintStatus",
              "offset": 0,
              "slot": "11",
              "type": "t_bool",
              "contract": "Troll",
              "src": "contracts/test/TestERC721A.sol:14"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13346_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A": {
        "src": "erc721a/contracts/ERC721A.sol:36",
        "version": {
          "withMetadata": "700f6519a4ec7e96755d83f5854523337ab07810dcdb24c8c79f7133cfba1e22",
          "withoutMetadata": "1d2a1c2c152f7b0a0ff27a673eaa5be6f5ad9c0f97bfe83499c5d497d28f3179",
          "linkedWithoutMetadata": "1d2a1c2c152f7b0a0ff27a673eaa5be6f5ad9c0f97bfe83499c5d497d28f3179"
        },
        "inherit": [
          "erc721a/contracts/IERC721A.sol:IERC721A"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "totalSupply()",
          "balanceOf(address)",
          "supportsInterface(bytes4)",
          "name()",
          "symbol()",
          "tokenURI(uint256)",
          "ownerOf(uint256)",
          "approve(address,uint256)",
          "getApproved(uint256)",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "transferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256)",
          "safeTransferFrom(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC721A",
            "src": "erc721a/contracts/ERC721A.sol:140"
          }
        ],
        "layout": {
          "storage": [
            {
              "label": "_currentIndex",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:98"
            },
            {
              "label": "_burnCounter",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:101"
            },
            {
              "label": "_name",
              "offset": 0,
              "slot": "2",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:104"
            },
            {
              "label": "_symbol",
              "offset": 0,
              "slot": "3",
              "type": "t_string_storage",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:107"
            },
            {
              "label": "_packedOwnerships",
              "offset": 0,
              "slot": "4",
              "type": "t_mapping(t_uint256,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:119"
            },
            {
              "label": "_packedAddressData",
              "offset": 0,
              "slot": "5",
              "type": "t_mapping(t_address,t_uint256)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:128"
            },
            {
              "label": "_tokenApprovals",
              "offset": 0,
              "slot": "6",
              "type": "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:131"
            },
            {
              "label": "_operatorApprovals",
              "offset": 0,
              "slot": "7",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "contract": "ERC721A",
              "src": "erc721a/contracts/ERC721A.sol:134"
            }
          ],
          "types": {
            "t_address": {
              "label": "address",
              "numberOfBytes": "20"
            },
            "t_bool": {
              "label": "bool",
              "numberOfBytes": "1"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))",
              "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_struct(TokenApprovalRef)13346_storage)": {
              "label": "mapping(uint256 => struct ERC721A.TokenApprovalRef)",
              "numberOfBytes": "32"
            },
            "t_mapping(t_uint256,t_uint256)": {
              "label": "mapping(uint256 => uint256)",
              "numberOfBytes": "32"
            },
            "t_string_storage": {
              "label": "string",
              "numberOfBytes": "32"
            },
            "t_struct(TokenApprovalRef)13346_storage": {
              "label": "struct ERC721A.TokenApprovalRef",
              "members": [
                {
                  "label": "value",
                  "type": "t_address",
                  "offset": 0,
                  "slot": "0"
                }
              ],
              "numberOfBytes": "32"
            },
            "t_uint256": {
              "label": "uint256",
              "numberOfBytes": "32"
            }
          },
          "layoutVersion": "1.2",
          "flat": true,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/ERC721A.sol:ERC721A__IERC721Receiver": {
        "src": "erc721a/contracts/ERC721A.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "onERC721Received(address,address,uint256,bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      },
      "erc721a/contracts/IERC721A.sol:IERC721A": {
        "src": "erc721a/contracts/IERC721A.sol:10",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "supportsInterface(bytes4)",
          "balanceOf(address)",
          "ownerOf(uint256)",
          "safeTransferFrom(address,address,uint256,bytes)",
          "safeTransferFrom(address,address,uint256)",
          "transferFrom(address,address,uint256)",
          "approve(address,uint256)",
          "setApprovalForAll(address,bool)",
          "getApproved(uint256)",
          "isApprovedForAll(address,address)",
          "name()",
          "symbol()",
          "tokenURI(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.2",
          "flat": false,
          "namespaces": {}
        },
        "solcVersion": "0.8.20"
      }
    }
  ]
}